// 
// Transformation.hpp
// Core
// 
// Created by Felix Busch on 28.03.2022.
// Copyright © 2022 Felix Busch. All rights reserved.
// 

#pragma once

#include <Core/System/Value2.hpp>
#include <Core/System/Angle.hpp>

namespace Core
{

	struct Matrix3x2
	{
		float Data[2 * 3];
	};

	////////////////////////////////////////////////////////////
	/// \brief Define transformation class to handle matrix
	///		   transformations.
	/// 
	////////////////////////////////////////////////////////////
	class Transformation
	{
	public:

		////////////////////////////////////////////////////////////
		/// \brief Default constructor.
		/// 
		////////////////////////////////////////////////////////////
		Transformation();

		////////////////////////////////////////////////////////////
		/// \brief Get/Set the position.
		/// 
		////////////////////////////////////////////////////////////
		void SetPosition(float x, float y);
		void SetPosition(const Float2& position);
		const Float2& GetPosition() const;

		////////////////////////////////////////////////////////////
		/// \brief Adjust the position by the given movement.
		/// 
		////////////////////////////////////////////////////////////
		void Move(float x, float y);
		void Move(const Float2& movement);

		////////////////////////////////////////////////////////////
		/// \brief Get/Set the scaling factor.
		/// 
		////////////////////////////////////////////////////////////
		void SetScale(float x, float y);
		void SetScale(const Float2& scale);
		const Float2& GetScale() const;

		////////////////////////////////////////////////////////////
		/// \brief Adjust the scaling factor by the given factor.
		/// 
		////////////////////////////////////////////////////////////
		void Scale(float factorX, float factorY);
		void Scale(const Float2& factor);

		////////////////////////////////////////////////////////////
		/// \brief Set the rotation to the given value.
		/// 
		////////////////////////////////////////////////////////////
		void SetRotation(const Angle& rotation);
		const Angle& GetRotation() const;

		////////////////////////////////////////////////////////////
		/// \brief Adjust the rotation by the given angle.
		/// 
		////////////////////////////////////////////////////////////
		void Rotate(const Angle& angle);
		
		////////////////////////////////////////////////////////////
		/// \brief Retrieve the transformation data in updated state.
		/// 
		////////////////////////////////////////////////////////////
		const Matrix3x2& GetTransform() const;

	private:

		////////////////////////////////////////////////////////////
		/// Member data
		/// 
		////////////////////////////////////////////////////////////
		Float2	position;	///< The 2D position
		Float2	scale;		///< The 2D scaling factor
		Angle	rotation;	///< The rotation as an angle

		mutable bool		needsUpdate;	///< Keep track of whether to re-calculate the transform or not
		mutable Matrix3x2	transform;		///< The 3x2 matrix transformation to apply to the render target
		
	};
}