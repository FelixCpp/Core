// 
// Stopwatch.hpp
// Core
// 
// Created by Felix Busch on 16.02.2022.
// Copyright © 2022 Felix Busch. All rights reserved.
// 

#pragma once

#include <Core/System/Time.hpp>

#include <chrono>

namespace Core
{
	////////////////////////////////////////////////////////////
	/// \brief Define stopwatch to time processes
	/// 
	////////////////////////////////////////////////////////////
	class Stopwatch
	{
	public:

		////////////////////////////////////////////////////////////
		/// \brief Create a stopwatch and start it
		///
		///	\return An already started stopwatch
		/// 
		////////////////////////////////////////////////////////////
		static Stopwatch StartNew();

		////////////////////////////////////////////////////////////
		/// \brief Default constructor
		/// 
		////////////////////////////////////////////////////////////
		Stopwatch();

		////////////////////////////////////////////////////////////
		/// \brief Start ticking
		///
		///	If the stopwatch is already ticking, this method will
		///	do nothing. If not it will continue from where it has
		///	stopped the last time.
		///
		////////////////////////////////////////////////////////////
		void Start();

		////////////////////////////////////////////////////////////
		/// \brief Stop ticking
		///
		///	If the stopwatch is ticking, this method will stop
		///	immediately. If not, it won't effect anything.
		/// 
		///	\return The time elapsed since last restart
		///
		////////////////////////////////////////////////////////////
		Time Stop();

		////////////////////////////////////////////////////////////
		/// \brief Get the elapsed time since last restart.
		///
		///	\return The time elapsed since last restart.
		/// 
		////////////////////////////////////////////////////////////
		[[nodiscard]] Time GetElapsedTime() const;

		////////////////////////////////////////////////////////////
		/// \brief Restart the stopwatch
		///
		///	The stopwatch is set back to its initial state
		///	and restarted right after that.
		///
		///	\return The time elapsed since last restart
		/// 
		////////////////////////////////////////////////////////////
		Time Restart();

		////////////////////////////////////////////////////////////
		/// \brief Reset the stopwatch.
		///
		///	The stopwatch is set back to its initial state
		///	and be stopped.
		/// 
		////////////////////////////////////////////////////////////
		Time Reset();

		////////////////////////////////////////////////////////////
		/// \brief Get whether the stopwatch is ticking or not.
		/// 
		////////////////////////////////////////////////////////////
		[[nodiscard]] bool IsTicking() const;

	private:

		////////////////////////////////////////////////////////////
		/// Types
		/// 
		////////////////////////////////////////////////////////////
		using Clock		= std::chrono::steady_clock;
		using TimePoint	= Clock::time_point;

		TimePoint start;
		TimePoint end;
		bool isTicking;

	};

}